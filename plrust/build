#!/usr/bin/env bash
set -xe

if [ -z "$PLRUST_TARGETS" ]; then
    export PLRUST_TARGETS="x86_64-postgres-linux-gnu aarch64-postgres-linux-gnu"
fi

# Make sure the tip of pgx's develop branch is used,
# until a release that has all the necessary features is cut.
cargo update -p pgx
cargo fetch
if [ "$CI" != true ]; then
    cargo install cargo-pgx \
     --version "0.7.0-beta.1" \
     --locked # use the Cargo.lock in the pgx repo
fi

# Don't need to run cargo pgx init: user might already have set it up,
# and doing so risks clobbering their configuration.
# If they get an error, it's fairly self-explanatory.

(
    if cd postgrestd; then
        git pull
        git submodule update --init --recursive
    else
        git clone https://github.com/tcdi/postgrestd.git --branch "thomcc/multi-target" --recurse-submodules
        cd ./postgrestd
    fi
    rm --force rust-toolchain.toml
    STD_TARGETS="$PLRUST_TARGETS" ./run clean
    STD_TARGETS="$PLRUST_TARGETS" ./run install
)

cargo test --verbose --no-default-features --features "pg${PG_VER:-15} target_postgrestd"
